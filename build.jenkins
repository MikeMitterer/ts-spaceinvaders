pipeline {
    agent {
        label 'linux'
    }

    // 0 - unchanged, 1 - changed
    environment { SRC_CHANGED=true }

    parameters {
        booleanParam(defaultValue: true, description: 'Run tests', name: 'RUN_TESTS')
        booleanParam(defaultValue: false, description: 'Deletes node_modules-Folder', name: 'REMOVE_NODE_MODULES')
        booleanParam(defaultValue: false, description: 'Publishes to TestServer', name: 'PUBLISH_TO_TESTSERVER')
    }
    
    stages {
        stage('Preparation') {
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    ansiColor('xterm') {
                        script { if (env.REMOVE_NODE_MODULES) {
                            sh 'rm -rf node_modules yarn.lock'
                        }}

                        sh 'yarn clean && yarn install'

                        // Repos von Amazon holen
                        // sh 'docker/_ci/run.sh --pull'

                        // Docker f√ºr die Integration-Tests starten
                        // sh 'docker/_ci/run.sh --start'

                        script {
                            // 0 - unchanged, 1 - changed
                            // Script-Logik wird mit ! umgekehrt
                            SRC_CHANGED = ! sh(script: "srcchanged.sh --check", returnStatus: true)
                        }
                    }
                }
            }
        }
        stage('Test') {
            when { anyOf { expression { params.RUN_TESTS } }}
            steps {
                ansiColor('xterm') {
                    sh 'yarn run tc'
                    sh 'yarn run lint'
                    sh 'yarn run test'
                }
            }
        }
        stage('Build') {
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    ansiColor('xterm') {
                        sh 'yarn run build:prod'
                    }
                }

            }
        }

        stage('Deploy') {
           when { anyOf {
                        expression { SRC_CHANGED }
                        expression { params.PUBLISH_TO_TESTSERVER }
                        }
                 }
            steps {
                ansiColor('xterm') {
                    sh 'yarn run deploy && git push origin HEAD:master'

                    // Zum LightSail-Server
                    sh 'deployWebApp.sh deploy'
                }
            }
        }
    }

    // post {
    //     always {
    //         ansiColor('xterm') {
    //             sh 'docker/_ci/run.sh --stop'
    //         }
    //     }
    // }

}
